1.岛屿数量
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):return #越界直接return
            if grid[r][c]!="1":return  #注意题目这里输入的是字符"0",“1”
            grid[r][c]="2"
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
            return 1  #是岛屿,则返回1

        res=0
        for  r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]=="1": 
                    res+=dfs(grid,r,c)  #累加岛屿的数量
        return res

2.封闭岛屿数量
class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):
                self.flag=0 #注意这里用self.flag=0 假如遇到边界，标记此时不算做岛屿
                return 
            if grid[r][c]!=0: #注意题目中岛屿的0，1 定义
                return 
            grid[r][c]=1
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
                       
        res=0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]==0:
                    self.flag=1   #先假设是封闭岛屿
                    dfs(grid,r,c) #假如不是封闭岛屿flag会置0
                    res+=self.flag
        return res

3. 封闭岛屿的最大面积
    class Solution:
        def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
            def dfs(grid,r,c):
                if not 0<=r<len(grid) or not 0<=c<len(grid[0]):
                    return 
                if grid[r][c]!=1:return 
                grid[r][c]=2
                self.S+=1  #有一个陆地格子，面积S就+1
                dfs(grid,r-1,c)
                dfs(grid,r+1,c)
                dfs(grid,r,c-1)
                dfs(grid,r,c+1)
                
            res=0
            for r in range(len(grid)):
                for c in range(len(grid[0])):
                    if grid[r][c]==1:
                        self.S=0 #初试化面积S
                        dfs(grid,r,c)  
                        res=max(res,self.S)
            return res




