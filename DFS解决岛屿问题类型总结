1.岛屿数量
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):return #越界直接return
            if grid[r][c]!="1":return  #注意题目这里输入的是字符"0",“1”
            grid[r][c]="2"
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
            return 1  #是岛屿,则返回1

        res=0
        for  r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]=="1": 
                    res+=dfs(grid,r,c)  #累加岛屿的数量
        return res

2.封闭岛屿数量
class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):
                self.flag=0 #注意这里用self.flag=0 假如遇到边界，标记此时不算做岛屿
                return 
            if grid[r][c]!=0: #注意题目中岛屿的0，1 定义
                return 
            grid[r][c]=1
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
                       
        res=0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]==0:
                    self.flag=1   #先假设是封闭岛屿
                    dfs(grid,r,c) #假如不是封闭岛屿flag会置0
                    res+=self.flag
        return res

3. 封闭岛屿的最大面积
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):
                return 
            if grid[r][c]!=1:return 
            grid[r][c]=2
            self.S+=1  #有一个陆地格子，面积S就+1
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
            
        res=0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]==1:
                    self.S=0 #初试化面积S
                    dfs(grid,r,c)  
                    res=max(res,self.S)
        return res
4.岛屿的周长
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        def dfs(grid, r, c):
            if not 0 <= r < len(grid) or not 0 <= c < len(grid[0]):
                self.c += 1
                return 
            
            if grid[r][c] == 0:
                self.c += 1
                return
            
            if grid[r][c] != 1:
                return

            grid[r][c] = 2
            dfs(grid, r+1, c)
            dfs(grid, r-1, c)
            dfs(grid, r, c-1)
            dfs(grid, r, c+1)

        res = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    self.c = 0
                    dfs(grid, i, j)
                    res = max(self.c, res)

        return res
5. 被围绕的区域 leetcode-130
class Solution:
    def solve(self, grid: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """

        def dfs(grid, r, c):
            if not 0 <= r < len(grid) or not 0 <= c <len(grid[0]):
                return 

            if grid[r][c] != 'O':
                return

            grid[r][c]="2"
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)

        #首次遍历改变边界的“0” 为“2”    
        for  r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]=="O" and (r==0 or r==len(grid)-1 or c==0 or c==len(grid[0])-1): #只改变边界的‘O’
                    dfs(grid,r,c) 

        #再次遍历将三种格子改值
        for  r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c]=="O":            
                    grid[r][c]='X' 
                if grid[r][c]=="2":
                    grid[r][c]="O"

6.飞地的数量 leetcode-1020
class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        def dfs(grid,r,c):
            if not 0<=r<len(grid) or not 0<=c<len(grid[0]):
                return
            if grid[r][c]!=1:
                return
            grid[r][c]=0
            dfs(grid,r-1,c)
            dfs(grid,r+1,c)
            dfs(grid,r,c-1)
            dfs(grid,r,c+1)
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]==1 and (i==0 or i==len(grid)-1 or j==0 or j==len(grid[0])-1): #将边界的陆地块都置0，剩下的都是封闭岛屿的1
                    dfs(grid,i,j)
        return  sum(map(sum,grid))  #返回最后的加和即可





